# -*- coding: utf-8 -*-
"""Copy of Escape-Room-Neurex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RGACmkuBdkPXlOiQRq-KgPQ3ABCHMmxq

# üß† Escape the BCI

An Intro to Python Escape Room

Description:
You‚Äôve been trapped inside your own mind after a brain-computer interface (BCI) experiment went wrong. The only way out is to code your way through the neural maze. Each puzzle you solve unlocks a new layer of your brain, bringing you closer to escape. Along the way, you‚Äôll practice Python basics‚Äîvariables, functions, loops, and conditionals‚Äîwhile piecing together clues hidden in your neural code. Can you debug your thoughts and break free from the BCI?

### Puzzle 1: Neural Handshake
Goal: learn Python **variables** and **printing**.  
When you finish, your code will print a passcode to enter in the Google Form.
"""

# --- Step 1: Make your first variables (fill the TODOs) ---

# TODO: Set your first name as text between quotes, like "Alex"
first_name = "Aarya"

# TODO: Make a number variable for signal strength by adding 21 + 21
signal_strength =21+21  # replace None

# IGNORE BELOW
print("Hello,", first_name)
print("Signal strength is", signal_strength)
passcode = "BCI-" + str(signal_strength)
print("PASSCODE:", passcode)

"""### Puzzle 2: Memory Fragments
You‚Äôve entered a deeper layer of your mind.  
Use **lists** and **indexing** to search through memory fragments.  
Your goal is to find the hidden exit key.

"""

# --- Step 1: A list of memory fragments ---
fragments = ["sunset", "apple", "whisper", "EXIT-7", "river", "echo"]

# --- Step 2: Print the whole list ---
print("Your mind is filled with fragments:", fragments)

# --- Step 3: Accessing by index ---
# TODO: Replace None with the index number of the exit key.
# Remember: Python starts counting at 0.
exit_key = fragments[3]

# IGNORE BELOW
print("EXIT KEY:", exit_key)

"""### Puzzle 3: Thought Loops
You are trapped in a cycle of repeating thoughts.
Use a **for-loop** to repeat a word until the exit code appears.

"""

# --- Step 1: Create a thought to repeat ---
thought = "I must escape"

# --- Step 2: Use a for-loop to repeat the thought 5 times ---
# TODO: Fix the loop so it repeats 5 times
for i in range(5):
    print(thought)

# IGNORE BELOW
code_word = "FREEDOM"
print("CODE WORD:", code_word)

"""### Puzzle 4: The Forking Corridor
Use **if/else** to route toward the real signal.
"""

import random

# Step 1: You receive a reading
reading = random.random()

# Step 2: Decide which door: threshold is 0.8
# TODO: Use an if/else: if reading >= 0.8 -> door = "signal", else -> door = "noise"
door = "noise"

# IGNORE BELOW
if door == "signal" and reading >= 0.8:
    door = "SIGNAL_OK"
elif door == "noise" and reading < 0.8:
    door_code = "SIGNAL-OK"
else:
    door_code = "???"

print("Door:", door)
print("DOOR CODE:", door_code)

"""### Puzzle 5: Recall a Function
Write a **function** that strengthens a weak signal by squaring it and scaling.
"""

# Step 1: Define the function
# TODO: Write amplify(x) that returns x-squared multiplied by 100
def amplify(x):
    return (x**2*100)# replace with your return

# Step 2: Use it
signal = 2
strength = amplify(signal)
print("Strength:", strength)

# IGNORE BELOW
if strength == 400:
    function_code = "FUNC-256"
else:
    function_code = "???"

print("FUNCTION CODE:", function_code)

"""###  Puzzle 6: Memory Map
Use a **dict** to map concepts to labels and fetch the right one.

"""

# Step 1: Map memory labels
mem = {
    "variables": "UNLOCK-VARS",
    "lists": "UNLOCK-LISTS",
    "loops": "UNLOCK-LOOPS",
    "functions": "UNLOCK-FUNC"
}

# Step 2: Retrieve the right label
# TODO: Replace None with the key that represents repeated actions
unlock = mem["loops"]

# IGNORE BELOW
print("UNLOCK CODE:", unlock)

"""### Puzzle 7: Signal Mantra
Goal: practice strings, case, and slicing.
"""

raw = "  heLLo!  "
# TODO 1: strip spaces
clean = raw.strip()
# TODO 2: remove the exclamation mark using slicing
no_bang =clean.strip('!')
# TODO 3: make it uppercase
mantra = no_bang.upper()

# IGNORE BELOW
mantra_code = "MANTRA-" + mantra
print("MANTRA CODE:", mantra_code)

"""### Puzzle 8: Stabilize the Thought
Goal: practice while-loops and counters.
"""

level = 0
target = 10

# TODO: run the loop until level reaches target
while level < target:
    level+=1

# IGNORE BELOW
stability_code = f"STABLE-{level}"
print("STABILITY CODE:", stability_code)

"""### Puzzle 9: Intrusive Thought Firewall
Goal: practice boolean logic with and/or/not.
"""

# A thought has attributes:
is_calm = True
is_focus = True
is_intrusive = False

# TODO: Allow only calm AND focused AND NOT intrusive
allowed = True


# IGNORE BELOW
firewall_code = "CLEAR-TRUE" if allowed else "CLEAR-FALSE"
print("FIREWALL CODE:", firewall_code)

"""### Final Puzzle: Commit Your Escape
**Goal:** Create a public GitHub repo named `escape-the-bci`, upload your notebook or script, and verify via the GitHub API.

**Steps**
1. Create a public repo on GitHub named **escape-the-bci**.
2. Add your file: `escape_the_bci.ipynb` or `escape_the_bci.py` (either is fine).
3. Copy your repo URL (e.g., `https://github.com/yourname/escape-the-bci`).
4. Paste it into the code cell below and run it.

"""



# @title
# IGNORE ENTIRE CELL

import re
import requests
from urllib.parse import urlparse

def verify_repo(url: str) -> str:
    """
    Verifies a public GitHub repo exists, is named 'escape-the-bci',
    and contains either 'escape_the_bci.ipynb' or 'escape_the_bci.py'.
    Returns 'GIT-OK' if everything passes, otherwise raises a ValueError with a helpful message.
    """
    # 1) Parse and validate URL shape
    if not re.match(r"^https://github\.com/[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+/?$", url.strip()):
        raise ValueError("‚ùå Repo URL must look like https://github.com/<user>/<repo>")

    path_parts = urlparse(url).path.strip("/").split("/")
    owner, repo = path_parts[0], path_parts[1]

    # 2) Enforce the required repo name
    if repo.lower() != "escape-the-bci":
        raise ValueError("‚ùå Your repository must be named exactly 'escape-the-bci' (case-insensitive).")

    # 3) Check repo exists via GitHub API
    repo_api = f"https://api.github.com/repos/{owner}/{repo}"
    r = requests.get(repo_api, timeout=10)
    if r.status_code == 404:
        raise ValueError("‚ùå Repository not found. Make sure it is public and the URL is correct.")
    if r.status_code != 200:
        raise ValueError(f"‚ùå GitHub API error (status {r.status_code}). Try again in a minute.")

    # 4) Check required file(s) exist in the repo root
    contents_api = f"https://api.github.com/repos/{owner}/{repo}/contents"
    c = requests.get(contents_api, timeout=10)
    if c.status_code != 200:
        raise ValueError("‚ùå Could not list repo contents. Is it public?")

    files = [item.get("name", "") for item in c.json() if isinstance(item, dict)]
    if not any([".ipynb" in file_name or ".py" in file_name for file_name in files]):
        raise ValueError("‚ùå Repo must contain 'escape_the_bci.ipynb' or 'escape_the_bci.py' in the **root**.")

    # 5) Success!
    return "GIT-OK"

# @title
# TODO
repo_url = input("Paste your GitHub repo URL (e.g., https://github.com/yourname/escape-the-bci): ").strip()

# IGNORE BELOW
try:
    code = verify_repo(repo_url)
    print("\n‚úÖ Verification passed!")
    print("VERIFICATION CODE:", code)
    print("Now paste your repo link and 'GIT-OK' into the Google Form.")
except Exception as e:
    print(str(e))
    print("\nHint: Make sure the repo is **public**, named 'escape-the-bci', and contains 'escape_the_bci.ipynb' or 'escape_the_bci.py' at the top level.")